{"name":"X86-kernel","tagline":"This is a simple kernel for the x86 processor with a sample app to test it.","body":"# What the hell this thing does?\r\n\r\nWell, this is just a project for the Digital Techniques signature at Electronics Engineering in UTN FRBA, Argentina. This program initializes a x86 Intel compatible processor,\r\nthanks to Dario Alpern for the code of the initialization, and then runs some API initialization for running a minimalistic kernel with five tasks. Some system calls are implemented,\r\npagination, keyboard handler and other features. I have to thank Diego Garcia for the code of the RTC too.\r\n\r\nEnjoy it!\r\n\r\nPS: I will translate the comments in code to English for better understanding of people and I will make a wiki for keeping things right.\r\n\r\n\r\n# Tools\r\n\r\nThis code has been done with:\r\n\r\n  - Bochs x86 Emulator 2.6.2\r\n  - Kate: 3.8.4\r\n  - NASM version 2.10.01 compiled on Jun 14 2012\r\n  - GNU Make 3.81\r\n  - Several cups of coffe\r\n  - Time, effort and frustration\r\n  - Google!\r\n\r\n# Contenido de cada archivo:\r\n\r\n1. memory_map.txt: contiene la descripcion del mapa de memoria de la aplicacion\r\n2. init16.asm: contiene las inicializaciones de modo real\r\n3. init32.asm: inicializaciones de modo protegido.\r\n4. exception.asm: contiene el codigo que permite cargar los handlers de excepciones y el desarrollo de los mismos\r\n5. interruption.asm:  contiene el codigo que permite cargar los handlers de interrupciones y algunos desarrollos\r\n6. fifo.asm y fifo.inc: api que permite manejar una fifo.\r\n7. keyboard.asm y keyboard.inc: api que permite manejar el teclado.\r\n8. numeric.asm: api de uso matematico.\r\n9. pagination.asm y pagination.inc: contiene el codigo encargado de crear las tablas de paginacion en la inicializaciones\r\n10. sys_tables.asm: contiene la GDT, IDT y dem치s descritores principales de control de memoria y de programa.\r\n11.- system.asm: todo lo relativo al Kernel.\r\n12. tasks.asm: codigo y memoria de las tareas.\r\n13. tss.inc: contiene la descripcion de la estructura de la tss.\r\n14. video.asm y video.inc: api para el control de la memoria de video.\r\n15. main32.asm: codigo de aplicacion principal. En este ejercicio aun no se lo ha utilizado.\r\n\r\n# System Calls\r\n\r\n1. Para crear una system call, escribir el c칩digo de la misma. Definir un ID de SYSCALL en system.inc y modificar el maximo.\r\n2. Ir a la funci칩n systemLoadSysCalls y agregar en la posici칩n correspondiente (segun el ID colocado que debe ser consecutivo) la etiqueta del inicio.\r\n3. El wrapper debe ser de la forma:\r\n\r\n      wrapper:      \r\n\t  mov \teax, SYSTEM_API_SYSCALL_ID\r\n\t  int \t0x80\r\n\t  ret\r\n\r\n# Tarea inicial\r\n\r\nLa tarea inicial carga algunas cosas del kernel y luego hace un hlt - jmp para reducir el consumo de la cpu en caso de tener tareas que no utilicen el \r\nespacio de procesamiento. Siempre debe estar con prioridad 1\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}