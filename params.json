{"name":"X86-kernel","tagline":"This is a simple kernel for the x86 processor with a sample app to test it.","body":"# What the hell this thing does?\r\n\r\nWell, this is just a project for the Digital Techniques signature at Electronics Engineering in UTN FRBA, Argentina. This program initializes a x86 Intel compatible processor,\r\nthanks to Dario Alpern for the code of the initialization, and then runs some API initialization for running a minimalistic kernel with five tasks. Some system calls are implemented,\r\npagination, keyboard handler and other features. I have to thank Diego Garcia for the code of the RTC too.\r\n\r\nEnjoy it!\r\n\r\nPS: I will translate the comments in code to English for better understanding of people and I will make a wiki for keeping things right.\r\n\r\n\r\n# Tools\r\n\r\nThis code has been done with:\r\n\r\n  - Bochs x86 Emulator 2.6.2\r\n  - Kate: 3.8.4\r\n  - NASM version 2.10.01 compiled on Jun 14 2012\r\n  - GNU Make 3.81\r\n  - Several cups of coffe\r\n  - Time, effort and frustration\r\n  - Google!\r\n\r\n# Contenido de cada archivo:\r\n\r\n  - memory_map.txt: it has a description of the application memory map.\r\n  - init16.asm: it has the real mode initialization.\r\n  - init32.asm: it has the protected mode initialization. \r\n  - exception.asm: it has some exception handlers and some application code to work with pagination and display some error messages.\r\n  - interruption.asm: is has some exception handlers such as keyboard and tick.\r\n  - fifo.asm y fifo.inc: a FIFO API.\r\n  - keyboard.asm y keyboard.inc: a Keyboard API.\r\n  - numeric.asm: some number handler API.\r\n  - pagination.asm y pagination.inc: it has code to initialize the pagination structures of the involved tasks.\r\n  - sys_tables.asm: it has the GDT and IDT description. It also containes some other descriptors for the application and memory control.\r\n  - system.asm: all the Kernel.\r\n  - tasks.asm: the tasks code and memory.\r\n  - tss.inc: some defines and structure definitions.\r\n  - video.asm y video.inc: video memory manager.\r\n  - main32.asm: main app code. However it is not used right now.\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# System Calls\r\n\r\nTo create a system call follow these steps:\r\n  * Write the system call code. Define an ID in the system.inc file and modify the maximum ID define\r\n  * Modify the code of the function systemLoadSysCalls in system.asm and add in the correct position the label of the new implementation function.\r\n  * Write a wrapper like this:\r\n```asm\r\nwrapper:      \r\n\tmov \teax, SYSTEM_API_SYSCALL_ID\r\n\tint \t0x80\r\n\tret\r\n```\t  \r\n----------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n# Initial task or Idle task\r\n\r\nThe idle task loads some kernel configurations and it just does a `hlt` and  `jmp $-1` to reduce the CPU power consumption when no other task has to use the processing time slice. It must be set with priority 1.\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}